#include "Outil.h"
#include "Tds.h"
//Table Des Symboles,ie table de hachage interne seule, donc sans index ni dico.
int bTdsAmorceR;//ie le module a effectivement été amorcé
int nTdsVoiR;//dédié TdsVoir();numéro de la tds affichée
#define knItemLiM 500
#define knItemMaX (knItemLiM-1)
#define kuSymboleLiM 20
#define kuSymboleMax (kuSymboleLiM-1) //nombre total de symboles qui discrimine les identificateurs.
//la TDS est un tableau de knItemLiM items indexée dans [0..knItemMaX]:
        struct item{
                char ident[kuSymboleLiM];
                int val;//valeur associée à l'identificateur
        }*pitem;
        struct item TDS[knItemLiM];

int nCOUT;//compteur destiné à estimer la complexité algorithmique
int nAJOUT = 0;

int nCollisioN(char *sIdentificateur);
int nDispersioN(char *sIdentificateur);
int nIteM(char *sIdentificateur);
int bItemVidE(int nItem);

int nCollisioN(char *sIdentificateur){
        //rend la fonction de collision de sIdentificateur réputé non vide, à valeur dans [1..knItemMaX].
        int nCollision=0;
        nCollision=nChaineLg(sIdentificateur);
        //te("nCollision",nCollision);
        nCollision = nCollision % (knItemMaX - 1) +1;
        Assert1("nCollisioN",bCroit(1,nCollision,knItemMaX));
        return(nCollision);
}//nCollisioN

int nDispersioN(char *sIdentificateur){
        //rend la fonction de dispersion de sIdentificateur réputé non vide, à valeur dans [0..knItemMaX].
        int nDispersion=0;
        //printf("%s %c\n",sIdentificateur,sIdentificateur[0]);
        nDispersion=sIdentificateur[0]-'@';
        //te("nDispersion",nDispersion);
        nDispersion = nDispersion % knItemMaX;
        Assert1("nDispersioN",bCroit(0,nDispersion,knItemMaX));
        return(nDispersion);
}//nDispersion

int nIteM(char *sIdentificateur){
        //si sIdentificateur est présent en TDS,rend son index dans la TDS;sinon,rend l'index d'un item vide.
        int bEureka,bPartir;
        int nItem=nDispersioN(sIdentificateur);
        While(knItemLiM);
        do{
                bEureka=bChaineEgale(TDS[nItem].ident,sIdentificateur);
                bPartir=bEureka || bItemVidE(nItem);
                //tb("bEureka,bPartir",bEureka,bPartir);
                if(!bPartir)
                        nItem=( nItem + nCollisioN(sIdentificateur) ) % knItemLiM;
        }while (bWhile("nIteM:TDS saturée",!bPartir));//donc déroute si aucun item n'est vide.
        Assert1("nIteM",bCroit(0,nItem,knItemMaX));
        return(nItem);
}//nIteM

int bItemVidE(int nItem){
        //vrai ssi TDS[nItem] est une entrée vide.
        Assert1("bItemVidE",bCroit(0,nItem,knItemMaX));
        int bVide=nChaineLg(TDS[nItem].ident)==0;
        return(bVide);
}//bItemVidE

void TdsAjouter(char *sIdentificateur){
        //si sIdentificateur est absent et s'il reste de la place en TDS,insère (sIdentificateur,0) en TDS. Sinon,ne fait rien.
        Assert2("TdsAjouterValuer",bTdsAmorceR,nChaineLg(sIdentificateur)>0);
        nCOUT++;
        int nPlace = nTirage(knItemLiM);
        if (!bTdsContient(sIdentificateur,&nPlace)){
                //te("nPlace",nPlace);
                nAJOUT++;
                strcpy(TDS[nPlace].ident,sIdentificateur);
                TDS[nPlace].val=0;
        }
}//TdsAjouterValuer

void TdsAjouterValuer(char *sIdentificateur,int iValeur){
        //comme TdsAjouter défini ci-dessus,plus l'affectation de iValeur.
        Assert2("TdsAjouterValuer",bTdsAmorceR,nChaineLg(sIdentificateur)>0);
        TdsAjouter(sIdentificateur);
        int nPlace;
        if (bTdsContient(sIdentificateur,&nPlace)){
                TDS[nPlace].val=iValeur;
        }
}//TdsAjouterValuer

void TdsAMORCER(){
        //amorce le présent module une fois pour toutes
        nTdsVoiR=0;
        bTdsAmorceR=kV;
        te("sizeof(struct item)",sizeof(struct item));
        Assert1("TdsAMORCER",bFrontiere8(sizeof(struct item)));
}//TdsAMORCER

int bTdsContient(char *sIdentificateur,int *pnItem){//O(1)
        //vrai sIdentificateur est en TDS. Si oui, *pnItem donne son emplacement;sinon, *pnItem indexe un item vide.
        int bContient;
        Assert2("bTdsContient",bTdsAmorceR,nChaineLg(sIdentificateur)>0);
        *pnItem=nIteM(sIdentificateur);
        //te("*pnItem",*pnItem);
        Assert1("bTdsContient2",bCroit(0,*pnItem,knItemMaX));
        bContient=!bItemVidE(*pnItem);
        //tb("bContient",bContient);
        nCOUT++;
        return(bContient);
}//bTdsContient

int nTdsCout(){
        Assert2("nTdsCout",bTdsAmorceR,nCOUT>=0);
        return(nCOUT);
}//nTdsCout

void TdsINITIALISER(){//O(?)
        //raze la TDS et le compteur nCOUT
        int nItem;
        Assert1("TdsINITIALISER",bTdsAmorceR);
        for (nItem=0;nItem<=knItemMaX;nItem++){
                TDS[nItem].ident[0]='\0';
                TDS[nItem].val=0;
        }
        nCOUT=0;
}//TdsINITIALISER

char * ChaineGenerer(int bVoir) {
        int i = uTirage(5);
        int j;
        char * str = sC('\0');
        char c;

        for(j = 0; j < i; j++) {
                c = nTirage(26) + 'A';
                str = sC2(str, sC(c));

                /*printf("c : %c  -", c);
                printf("-  str : %s\n", str);*/
        }

        if(bVoir)
                printf("%s", str);

        return str;
}

void TdsTESTER(int iTest){
        //teste le présent module
        Appel0(sC2("TdsTESTER,test n°",sEnt(iTest)));
                switch (iTest) {
                case 1:
                        TdsVoir("vide");
                        tb("bTdsContient Charlot",bTdsContient("Charlot",&nBof));
                        TdsAjouterValuer("Charlot",5);
                        TdsVoir("après charlot");
                        tb("bTdsContient Charlot",bTdsContient("Charlot",&nBof));
                        break;
                case 4:
                        printf("");
                        int iMax = knItemLiM * 0.8;
                        //printf("Nb ajouts max : %i\n", iMax);
                        int i;
                        int val;

                        for(i = 0; i <= iMax; i++) {
                                val = uTirage(100);
                                //printf("Mot n°%i - %i:\n", i, val);
                                TdsAjouterValuer(ChaineGenerer(0),val);
                                //printf("\n");
                        }
                        TdsVoir("après ajout");
                        printf("\nNb d'ajouts : %i", nAJOUT);
                        printf("\nCoût total : %i", nTdsCout());
                        printf("\nCoût moyen : %i", nTdsCout() / nAJOUT);

                        break;
                default:
                        Assert1("TdsTESTER",0);
                        break;
        }
        Appel1(sC2("TdsTESTER,test n°",sEnt(iTest)));
}//TdsTESTER

void TdsVoir(char *sMessage){//O(nCardMaX)
        int nItem;
        Assert2("TdsVoir1",bTdsAmorceR,sMessage!=0);
        nTdsVoiR++;
        printf("TDS %s:\n",sMessage);
        printf("         Identificateur      valeur\n");
        for (nItem=0;nItem<=knItemMaX;nItem++)
                printf("%2d %20s %8d\n",nItem,TDS[nItem].ident,TDS[nItem].val);
                if (kF)//si vous mettez kV la Pause ci-dessous vous permettra de voir la TDS courante (il faudra presser une touche pour poursuivre).
                        Pause();
}//TdsVoir